x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
DATASET <- list(x, y)
names(DATASET) <- c("x", "y")
usethis::use_data(DATASET, overwrite = TRUE)
library(ktweedie)
library(ktweedie)
usethis::use_testthat(3)
library(ktweedie)
detach("package:testthat", unload = TRUE)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
rbfkernel <- rbfdot(sigma = 0.1)
rbfkernel
kpar(rbfkernel)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
-5:1
- 5:1
5:1
-(5:1)
library(ktweedie)
cv1d <- ktd_cv(x = x, y = y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5)
cv1d
library(ktweedie)
apply(1, rbfdot)
sapply(1, rbfdot)
sapply(1, rbfdot)[[1]]
sapply(1, polydot)[[1]]
sapply(2, polydot)[[1]]
sapply(3, polydot)[[1]]
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-5:1),
nfolds = 5) )
-8:-1
library(ktweedie)
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
library(ktweedie)
library(ktweedie)
( cv1d <- ktd_cv(x = DATASET$x, y = DATASET$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv2d <- ktd_cv2d(x = DATASET$x, y = DATASET$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 5) )
library(ktweedie)
( cv2d <- ktd_cv2d(x = DATASET$x, y = DATASET$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 5) )
( cv2d <- ktd_cv2d(x = DATASET$x, y = DATASET$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6) )
( cv2d <- ktd_cv2d(x = DATASET$x, y = DATASET$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6) )
data
dat
dat
## code to prepare `dat` dat goes here
library(tweedie)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 50
N <- 200
beta.true <- c(6, -4, 3, 2, -2, rep(0, P-5))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
dat <- list(x, y)
names(dat) <- c("x", "y")
usethis::use_data(dat, overwrite = TRUE)
library(ktweedie)
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6) )
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6) )
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6, loss = "RMSE") )
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6, loss = "MAD") )
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6, loss = "MAD") )
library(ktweedie)
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6, loss = "MAD") )
#' kern <- rbfdot(sigma = 0.01)
#' \dontrun{TD_estimate(x = X, y = Y, kern = kern,
#'                      LamReg = 10, rho = 1.2,
#'                      ftol = 1e-10, partol = 1e-15,
#'                      abstol = 0, maxit = 1e6,
#'                      quiet = TRUE)}
#'
#' @export
#'
#'
ktd_estimate <- function(x, y, kern, lam1, rho = 1.5,
ftol = 1e-8, partol = 1e-8,
abstol = 0, maxit = 1e6,
sparsity = FALSE, lam2 = 0,
innerpartol = 1e-6, innermaxit = 1e6,
verbose = FALSE) {
if (rho <= 1 | rho >= 2) stop("'rho' must be in (1, 2).")
x <- as.matrix(x)
dims <- dim(x)
N <- dims[1]
p <- dims[2]
nz <- length(y)
if (N != nz) stop("Sample sizes are different in x and y.")
# number of lam1's to be fitted
nhyper <- length(lam1)
estimates <- vector(mode = "list", length = nhyper)
# sparse kernel feature
if (sparsity) {
# only rbf kernel supported in sparse kernel
if (class(kern) != "rbfkernel") stop("Only RBF kernel is supported in sparse kernel feature. 'kern' has to be a 'rbfkernel' class.")
# number of sigmas
sigma <- kern@kpar$sigma
nsig <- length(sigma)
# check length conformity
if (nsig != nhyper) {
if (nsig == 1L) {
sigma <- rep(sigma, nhyper)
} else {
stop("Number of sigmas to evaluate is different from that of lam1.")
}
}
nlam2 <- length(lam2)
if (nlam2 != nhyper) {
if (nlam2 == 1L) {
lam2 <- rep(lam2, nhyper)
} else {
stop("Number of lam2 to evaluate is different from that of lam1.")
}
}
fit <- .Fortran("td_sk",
as.integer(N),
as.integer(p),
as.double(x),
as.double(y),
as.double(lam1),
as.double(lam2),
as.double(sigma),
as.integer(nhyper),
as.double(rho),
as.double(ftol),
as.double(partol),
as.double(abstol),
as.double(0),
as.double(innerpartol),
as.integer(maxit),
as.integer(innermaxit),
as.logical(verbose),
fn_final = double(nhyper),
gradf_final = double(N*nhyper),
param_final = double(N*nhyper),
wt_final = double(p*nhyper),
convergence = integer(nhyper)
)
# Prepare output
estimates.name <- character(nhyper)
for (i in 1:nhyper) {
if (fit$convergence[i] > 3) {
estimates[[i]] <- list(convergence = fit$convergence[i])
} else {
estimates[[i]] <- list(fn = fit$fn_final[i],
grad = matrix(fit$gradf_final[((i-1)*N+1):(i*N)], ncol = 1),
coefficient = matrix(fit$param_final[((i-1)*N+1):(i*N)], ncol = 1),
weight = matrix(fit$wt_final[((i-1)*p+1):(i*p)], ncol = 1),
convergence = fit$convergence[i]
)
}
estimates.name[i] <- paste("l1",lam1[i], "l2", lam2[i], class(kern), sigma[i])
}
names(estimates) <- estimates.name
}
if (!sparsity) {
lam1 <- sort(lam1, decreasing = TRUE)
lam2 <- rep(0, nhyper)
if (is.matrix(kern)) {
K <- kern
} else {
K <- as.matrix(kernelMatrix(kernel = kern, x))
sigma <- kern@kpar$sigma
}
fit <- .Fortran("td_bfgs",
as.integer(N),
as.double(K),
as.double(y),
as.double(lam1),
as.integer(nhyper),
as.logical(FALSE),
as.double(rep(0,N)),
as.double(rho),
as.double(ftol),
as.double(partol),
as.double(abstol),
as.integer(maxit),
as.logical(verbose),
resfn = double(nhyper),
resgradf = double(N*nhyper),
resparam = double(N*nhyper),
resKa = double(N*nhyper),
conv = integer(nhyper)
)
# Prepare output
estimates.name <- character(nhyper)
for (i in 1:nhyper) {
if (fit$conv[i]>3) {
estimates[[i]] <- list(convergence = fit$conv[i])
} else {
estimates[[i]] <- list(fn = fit$resfn[i],
grad = matrix(fit$resgradf[((i-1)*N+1):(i*N)], ncol = 1),
coefficient = matrix(fit$resparam[((i-1)*N+1):(i*N)], ncol = 1),
intercept = fit$resint[i],
weight = matrix(1, nrow = p, ncol = 1),
convergence = fit$conv[i]
)
}
estimates.name[i] <- paste("lambda", lam1[i])
}
names(estimates) <- estimates.name
}
if (is.matrix(kern)) {
data <- list(
x = x,
kernel = kern,
lambda1 = lam1
)
} else {
data <- list(x = x,
kernel = kern,
lambda1 = lam1,
sigma = rep(sigma, nhyper)
)
}
if (sparsity) {
data$lambda2 = lam2
data$sigma = sigma
}
result <- list(estimates = estimates,
data = data,
sparsity = sparsity)
return(result)
}
library(ktweedie)
library(ktweedie)
lam1.seq <- c(1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1)
( fit <- ktd_estimate(x = x, y = y,
kern = rbfdot(sigma = 1e-8),
lam1 = lam1.seq) )
lam1.seq <- c(1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1)
( fit <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = 1e-8),
lam1 = lam1.seq) )
lam1.seq <- c(1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1)
fit <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = lam1.seq),
lam1 = lam1.seq)
warnings()
rbfdot(sigma = lam1.seq)
kern <- rbfdot(sigma = lam1.seq)
kern@kpar$sigma
library(ktweedie)
### Cross-validation
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
ncoefs = 6) )
### Followed by fitting
fit <- ktd_estimate(x = x, y = y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda)
### Followed by fitting
fit <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda)
fit$estimates$`lambda 3.24356e-06`$intercept
fit$estimates$`lambda 3.24356e-06`$weight
fit$estimates$`lambda 3.24356e-06`$fn
library(ktweedie)
lam1.seq <- c(1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1)
fit <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = lam1.seq),
lam1 = lam1.seq)
kk <- polydot()
kk@kpar$degree
kk <- polydot(degree = 1:10, scale = 1:10, offset = 1:10)
kk
kk@kpar
kk@kpar[[1]]
ktd_estimate(x = dat$x, y)
ktd_estimate(x = dat$x, y = dat$y, kern = vanilladot(), lam1 = lam1.seq)
ktd_estimate(x = dat$x, y = dat$y, kern = polydot(), lam1 = lam1.seq)
