kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 1,
ftol = 1e-3,
partol = 1e-3,
innerpartol = 1e-5)
sktd.cv2d
x
dim(x)
kernlab::sigest(x)
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20221015)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 10
N <- 50
beta.true <- c(6, -4, 3, rep(0, P-3))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
dat <- list(x, y)
names(dat) <- c("x", "y")
usethis::use_data(dat, overwrite = TRUE)
args <- list("/opt/R/arm64/bin/qpdf")
names(args) <- "R_QPDF"
do.call(Sys.setenv, args)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.001, 0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.0001, 0.001, 0.01, 0.1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.2),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.3),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.01),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.05),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.08),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.008),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.0008),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.01),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(20220718)
library(ktweedie)
data(dat)
x <- dat$x
y <- dat$y
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 1,
sparsity = TRUE,
lam2 = 2)
fit.sktd$estimates[[1]]$weight
laplacedot(sigma = 1)
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.01),
lambda = c(0.0001, 0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv2d <- ktd_cv2d(x = x,
y = y,
kernfunc = laplacedot,
lambda = c(1e-5, 1e0),
sigma = c(1e-5, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "MAD")
ktd.cv2d
ktd.fit <- ktd_estimate(x = x,
y = y,
kern = laplacedot(sigma = ktd.cv2d$Best_sigma),
lam1 = ktd.cv2d$Best_lambda)
str(ktd.fit$estimates)
sktd.cv2d <- ktd_cv2d(x = x,
y = y,
kernfunc = rbfdot,
lambda = c(1e-3, 1e0),
sigma = c(1e-3, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 0.01,
ftol = 1e-3,
partol = 1e-3,
innerpartol = 1e-5)
sktd.fit$estimates
ktd.fit$estimates
sktd.cv2d <- ktd_cv2d(x = x,
y = y,
kernfunc = rbfdot,
lambda = c(1e-8, 1e-3),
sigma = c(1e-8, 1e-3),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 0.01,
ftol = 1e-3,
partol = 1e-3,
innerpartol = 1e-5)
sktd.fit
sktd.cv2d
sktd.fit
sktd.cv2d <- ktd_cv2d(x = x,
y = y,
kernfunc = rbfdot,
lambda = c(1e-8, 1e-3),
sigma = c(1e-8, 1e-3),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 1,
ftol = 1e-3,
partol = 1e-3,
innerpartol = 1e-5)
sktd.fit$estimates
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20220718)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 10
N <- 50
beta.true <- c(6, -4, 3, 2, -2, rep(0, P-5))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
dat <- list(x, y)
names(dat) <- c("x", "y")
usethis::use_data(dat, overwrite = TRUE)
library(ktweedie)
library(ktweedie)
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20220718)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 10
N <- 50
beta.true <- c(6, -4, 3, rep(0, P-5))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20220718)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 10
N <- 50
beta.true <- c(6, -4, 3, rep(0, P-3))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
dat <- list(x, y)
names(dat) <- c("x", "y")
usethis::use_data(dat, overwrite = TRUE)
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20221017)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 10
N <- 50
beta.true <- c(6, -4, 3, rep(0, P-3))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
dat <- list(x, y)
names(dat) <- c("x", "y")
usethis::use_data(dat, overwrite = TRUE)
library(ktweedie)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(20221017)
library(ktweedie)
data(dat)
x <- dat$x
y <- dat$y
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.5),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.01),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 1,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 10,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 5,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 3,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 2,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 5,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20221017)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 5
N <- 30
beta.true <- c(6, -4, rep(0, P-3))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20221017)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 5
N <- 30
beta.true <- c(6, -4, rep(0, P-3))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
## code to prepare `dat` dat goes here
library(tweedie)
set.seed(20221017)
rand_tweedie<- function(mu,...) {
Y <- rtweedie(1, mu = mu,...)
Y
}
phi <- 0.5
rho <- 1.5
P <- 5
N <- 30
beta.true <- c(6, -4, rep(0, P-2))
x <- matrix(rnorm(N * P), N, P)
Fx <- sin(x) %*% beta.true
mu <- exp(Fx)
y = sapply(mu, rand_tweedie, xi = rho, phi = phi)
dat <- list(x, y)
names(dat) <- c("x", "y")
usethis::use_data(dat, overwrite = TRUE)
library(ktweedie)
library(ktweedie)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(20221017)
library(ktweedie)
library(ktweedie)
data(dat)
x <- dat$x
y <- dat$y
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.01),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.001, 0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.00001, 0.001, 0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 5,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
laplacedot(sigma = 1)
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.01),
lambda = c(0.001, 0.01, 0.1, 1, 10),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1, 10),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv2d <- ktd_cv2d(x = x,
y = y,
kernfunc = laplacedot,
lambda = c(1e-5, 1e0),
sigma = c(1e-5, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "MAD")
ktd.cv2d
rhub::check()
