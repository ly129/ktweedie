## use ktd_cv2d to tune lam1 and sigma in the rbfdot()
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)
# sktweedie
## use ktd_cv2d to tune lam1 and sigma in the rbfdot()
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)
# sktweedie
## use ktd_cv2d to tune lam1 and sigma in the rbfdot()
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)
# sktweedie
## use ktd_cv2d to tune lam1 and sigma in the rbfdot()
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)
# sktweedie
## use ktd_cv2d to tune lam1 and sigma in the rbfdot()
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)
# sktweedie
## use ktd_cv2d to tune lam1 and sigma in the rbfdot()
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)
library(ktweedie)
fit.sparse
predict(fit.sparse)
predict(model = fit.sparse)
ktd_predict(model = fit.sparse)
pred <- ktd_predict(model = fit.sparse)
pred$prediction
library(ktweedie)
tools::package_native_routine_registration_skeleton("/Users/YLIAN/Documents/Research/Tweedie/Package/ktweedie")
library(ktweedie)
library(ktweedie)
fit <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = 1e-6),
lam1 = 10^(-5:1))
newx <- matrix(rnorm(10 * ncol(x), nrow = 10)
pred <- ktd_predict(model = fit, newdata = newx, which.lam1 = 3, type = "link")
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
tools::package_native_routine_registration_skeleton("/Users/YLIAN/Documents/Research/Tweedie/Package/ktweedie")
library(ktweedie)
library(ktweedie)
devtools::run_examples()
library(ktweedie)
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
library(ktweedie)
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 1,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 1,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 1,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
dim(dat$x)
length(dat$y)
library(ktweedie)
library(ktweedie)
library(ktweedie)
