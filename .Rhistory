verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-5, 1e1),
sigma = c(1e-5, 1e1),
ncoefs = 10)
## Set sparsity to TRUE and a lam2 to control the level of sparsity
fit.sparse <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda,
ftol = 1e-6, partol = 1e-6,
sparsity = TRUE,
lam2 = 6,   # Decrease lam2 if "WARNING: All weights are zero..."
innerpartol = 1e-4,
verbose = TRUE)
### variables with fitted weight equal to 0 are not selected
var_weights <- fit.sparse$estimates[[1]]$weight
plot(var_weights)   # First 5 variables are significant in data generation.
library(ktweedie)
library(ktweedie)
library(ktweedie)
library(ktweedie)
dim(dat$x)
length(dat$y)
library(ktweedie)
library(ktweedie)
library(ktweedie)
knitr::opts_chunk$set(
collapse = TRUE,
cache = TRUE,
comment = "#>"
)
library(ktweedie)
data(dat)
x <- dat$x
y <- dat$y
fit.ktd <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = 0.1), lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.sktd <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = 0.1),
lam1 = 1, sparsity = TRUE, lam2 = 1)
library(Matrix)
head(as(fit.sktd$estimates$`l1 1 l2 1 rbfkernel 0.1`$weight, "dgCMatrix"), 10)
laplacedot(sigma = 1)
ktd.cv1d <- ktd_cv(x = x, y = y, kern = laplacedot(sigma = 0.01),
lambda = c(0.001, 0.01, 0.1, 1, 10), nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv2d <- ktd_cv2d(x = x, y = y,
kernfunc = laplacedot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "MAD")
ktd.cv2d
ktd.fit <- ktd_estimate(x = x, y = y, kern = laplacedot(sigma = ktd.cv2d$Best_sigma),
lam1 = ktd.cv2d$Best_lambda)
str(ktd.fit$estimates)
sktd.cv2d <- ktd_cv2d(x = x, y = y,
kernfunc = rbfdot,
lambda = c(1e-2, 1e0),
sigma = c(1e-2, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = 1)
sktd.fit$estimates$`l1 0.0366603 l2 1 rbfkernel 0.0115105`$weight
sktd.cv2d <- ktd_cv2d(x = x, y = y,
kernfunc = rbfdot,
lambda = c(1e-2, 1e0),
sigma = c(1e-2, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = 10)
knitr::opts_chunk$set(
collapse = TRUE,
cache = TRUE,
comment = "#>"
)
library(ktweedie)
data(dat)
x <- dat$x
y <- dat$y
fit.ktd <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = 0.1), lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.sktd <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = 0.1),
lam1 = 1, sparsity = TRUE, lam2 = 1)
library(Matrix)
head(as(fit.sktd$estimates$`l1 1 l2 1 rbfkernel 0.1`$weight, "dgCMatrix"), 10)
laplacedot(sigma = 1)
ktd.cv1d <- ktd_cv(x = x, y = y, kern = laplacedot(sigma = 0.01),
lambda = c(0.001, 0.01, 0.1, 1, 10), nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv2d <- ktd_cv2d(x = x, y = y,
kernfunc = laplacedot,
lambda = c(1e-10, 1e0),
sigma = c(1e-10, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "MAD")
ktd.cv2d
ktd.fit <- ktd_estimate(x = x, y = y, kern = laplacedot(sigma = ktd.cv2d$Best_sigma),
lam1 = ktd.cv2d$Best_lambda)
str(ktd.fit$estimates)
sktd.cv2d <- ktd_cv2d(x = x, y = y,
kernfunc = rbfdot,
lambda = c(1e-3, 1e0),
sigma = c(1e-3, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = 2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
lam2 <- 5
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
lam2 <- lam2 * 0.8
wts[, i] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- 5
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wt[,i] <- 0
} else {
wt[,i] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
lam2 <- 5
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[,i] <- 0
} else {
wts[,i] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
sktd.cv2d <- ktd_cv2d(x = x, y = y,
kernfunc = rbfdot,
lambda = c(1e-3, 1e0),
sigma = c(1e-3, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "LL")
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = 2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
sktd.fit$estimates[[1]]$weight
lam2 <- 5
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[,i] <- 0
} else {
wts[,i] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
sktd.fit$estimates$`l1 0.0368607 l2 5 rbfkernel 0.0038537`$weight
ncol(x)
lam2 <- 10
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
matplot(wts)
matplot(wts, type = "l")
lam2 <- 10
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.9
}
matplot(wts, type = "l")
lam2 <- 50
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.9
}
lam2 <- 50
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.9
}
matplot(wts, type = "l")
50*0.9^9
lam2 <- 20
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.9
}
matplot(wts, type = "l")
lam2 <- 20
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
matplot(wts, type = "l")
lam2 <- 20
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
matplot(wts, type = "l", log = "x")
lam2 <- 20
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
matplot(x = wts, y = 20 * 0.8^(0:9) type = "l", log = "x")
matplot(x = wts, y = 20 * 0.8^(0:9), type = "l", log = "x")
matplot(x = 20 * 0.8^(0:9), y = wts, type = "l", log = "x")
matplot(x = wts, y = lam.seq, type = "l",
log = "x", ylab = "Weights", xlab = expression(paste(lambda)))
lam2.seq <- 20 * 0.8^(0:9)
matplot(x = wts, y = lam.seq, type = "l",
log = "x", ylab = "Weights", xlab = expression(paste(lambda)))
lam2.seq <- 20 * 0.8^(0:9)
matplot(x = wts, y = lam2.seq, type = "l",
log = "x", ylab = "Weights", xlab = expression(paste(lambda)))
lam2.seq <- 20 * 0.8^(0:9)
matplot(y = wts, x = lam2.seq, type = "l",
log = "x", ylab = "Weights", xlab = expression(paste(lambda)))
lam2 <- 20
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
lam2.seq <- 20 * 0.8^(0:9)
matplot(y = wts, x = lam2.seq, type = "l",
log = "x", ylab = "Weights", xlab = expression(paste(lambda)))
legend("topright", title = "w index", legend = 1:6, lty = 1:6, col = 1:5)
lam2 <- 20
wts <- matrix(NA, nrow = 10, ncol = ncol(x))
for (i in 1:10) {
sktd.fit <- ktd_estimate(x = x, y = y, kern = rbfdot(sigma = sktd.cv2d$Best_sigma),
lam1 = sktd.cv2d$Best_lambda, sparsity = TRUE, lam2 = lam2,
ftol = 1e-3, partol = 1e-3, innerpartol = 1e-5)
if (is.null(sktd.fit$estimates[[1]]$weight)) {
wts[i, ] <- 0
} else {
wts[i, ] <- sktd.fit$estimates[[1]]$weight
}
lam2 <- lam2 * 0.8
}
lam2.seq <- 20 * 0.8^(0:9)
matplot(y = wts, x = lam2.seq, type = "l",
log = "x", ylab = "Weights", xlab = expression(paste(lambda)))
legend("topright", title = "w index", legend = 1:6, lty = 1:6, col = 1:5)
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = latex_document
)
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
0:nlam2-1
nlam2 <- 15
0:nlam2-1
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
rmarkdown::render("vignettes/ktweedie-vignette.Rmd", output_format = rmarkdown::latex_document())
library(ktweedie)
library(ktweedie)
lam2 <- 50
nlam2 <- 10
wts <- matrix(NA, nrow = nlam2, ncol = ncol(x))
