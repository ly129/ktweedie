kern = rbfdot(sigma = 1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.001, 0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.00001, 0.001, 0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.ktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = c(0.01, 0.1, 1))
str(fit.ktd$estimates)
fit.sktd <- ktd_estimate(x = x,
y = y,
kern = rbfdot(sigma = 0.1),
lam1 = 5,
sparsity = TRUE,
lam2 = 1)
fit.sktd$estimates[[1]]$weight
laplacedot(sigma = 1)
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.01),
lambda = c(0.001, 0.01, 0.1, 1, 10),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1, 10),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv1d <- ktd_cv(x = x,
y = y,
kern = laplacedot(sigma = 0.1),
lambda = c(0.001, 0.01, 0.1, 1),
nfolds = 5,
loss = "LL")
ktd.cv1d
ktd.cv2d <- ktd_cv2d(x = x,
y = y,
kernfunc = laplacedot,
lambda = c(1e-5, 1e0),
sigma = c(1e-5, 1e0),
nfolds = 5,
ncoefs = 10,
loss = "MAD")
ktd.cv2d
rhub::check()
library(ktweedie)
ktd_cv2d
library(ktweedie)
args <- list("/opt/R/arm64/bin/qpdf")
names(args) <- "R_QPDF"
do.call(Sys.setenv, args)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
TD\kernel::TD_cv2d
TDkernel::TD_cv2d
1:2[11]
x <- 1:2
x
x[11]
x[12]
# rm(list = ls())
library(ktweedie)
library(beepr)
if (Sys.info()['sysname'] == "Windows") {
setwd("C:/Users/shyderyl/iCloudDrive/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
} else {
setwd("/Users/YLIAN/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
}
traintest <- read.csv("dat_clean.csv", row.names=1)
traintest$accyr <- traintest$accyr - min(traintest$accyr) + 1
# integer -> numeric
traintest[, -(1:2)] <- sapply(traintest[, -(1:2)], as.numeric)
### complete cases
traintest <- traintest[complete.cases(traintest), ]
train <- traintest[traintest$accyr + traintest$devyr < 21, ]
### training
variables <- c("accyr",
"devyr",
"top.inc",
"left.inc"
# "earned_prem"
)
## tune lambda
# sigma <- kernlab::sigest(as.matrix(train[, variables]), frac = 1, scaled = F)[1]
# cv.rbf <- TD_cv(x = as.matrix(train[, variables]),
#                 z = train$true_loss.inc,
#                 kern = rbfdot(sigma = sigma),
#                 lambda = 10^seq(-15, 0, by = 0.05),
#                 nfolds = 10,
#                 rho = 1.5,
#                 loss = "RMSE",
#                 ftol = 1e-10,
#                 partol = 1e-10,
#                 maxit = 1000,
#                 verbose = 0)
# plot(cv.rbf$RMSE ~ sort(10^seq(-15, 0, by = 0.05), decreasing = T), log = "xy")
# cv.rbf$Best_lambda
cv.rbf2d <- ktd_cv2d(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kernfunc = rbfdot,
# lambda = c(1e-8,1e-6),
# sigma = c(2e-3, 3e-3),
lambda = c(1e-15,1e-5),
sigma = c(1e-15, 1e-5),
no.hyper = 2000,
nfolds = 10,
rho = 1.5,
loss = "RMSE",
verbose = -1)
cv.rbf2d <- ktd_cv2d(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kernfunc = rbfdot,
# lambda = c(1e-8,1e-6),
# sigma = c(2e-3, 3e-3),
lambda = c(1e-15,1e-5),
sigma = c(1e-15, 1e-5),
ncoefs = 2000,
nfolds = 10,
rho = 1.5,
loss = "RMSE",
verbose = -1)
cv.rbf2d$Best_lambda; cv.rbf2d$Best_sigma
fit.rbf <- ktd_estimate(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kern = rbfdot(sigma = cv.rbf2d$Best_sigma),
lam1 = cv.rbf2d$Best_lambda,
rho = 1.5,
ftol = 1e-20,
partol = 1e-20,
intercept = F)
fit.rbf <- ktd_estimate(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kern = rbfdot(sigma = cv.rbf2d$Best_sigma),
lam1 = cv.rbf2d$Best_lambda,
rho = 1.5,
ftol = 1e-20,
partol = 1e-20)
fit.rbf
# testing
test.rbf <- traintest[traintest$accyr + traintest$devyr >= 21, ]
test.rbf <- test.rbf[order(test.rbf$accyr + test.rbf$devyr), ]
test.n <- nrow(test.rbf)
test.rbf$topleft.inc[16:test.n] <- NA
test.rbf$top.inc[9:test.n] <- test.rbf$left.inc[9:test.n] <- NA
for (cal.year in 21:28) {
pred.tmp <- TD_predict(x.test = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
}
for (cal.year in 21:28) {
pred.tmp <- ktd_predict(x.test = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
}
for (cal.year in 21:28) {
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
}
cal.year <- 21
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
for (cal.year in 21:28) {
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
}
fit.rbf <- ktd_estimate(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kern = rbfdot(sigma = cv.rbf2d$Best_sigma),
lam1 = cv.rbf2d$Best_lambda,
rho = 1.5,
ftol = 1e-20,
partol = 1e-20)
# lambda = 5.962642e-07
# sigma = 0.002381683
# testing
test.rbf <- traintest[traintest$accyr + traintest$devyr >= 21, ]
test.rbf <- test.rbf[order(test.rbf$accyr + test.rbf$devyr), ]
test.n <- nrow(test.rbf)
test.rbf$topleft.inc[16:test.n] <- NA
test.rbf$top.inc[9:test.n] <- test.rbf$left.inc[9:test.n] <- NA
for (cal.year in 21:28) {
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
}
for (cal.year in 21:28) {
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
print(cal.year)
}
test.rbf
# testing
test.rbf <- traintest[traintest$accyr + traintest$devyr >= 21, ]
test.rbf
test.rbf <- test.rbf[order(test.rbf$accyr + test.rbf$devyr), ]
test.rbf
test.n <- nrow(test.rbf)
test.rbf$topleft.inc[16:test.n] <- NA
test.rbf$top.inc[9:test.n] <- test.rbf$left.inc[9:test.n] <- NA
test.rbf
dim(test.rbf)
test.rbf <- traintest[traintest$accyr + traintest$devyr >= 21, ]
test.rbf <- test.rbf[order(test.rbf$accyr + test.rbf$devyr), ]
test.n <- nrow(test.rbf)
test.rbf$topleft.inc[16:test.n] <- NA
test.rbf$top.inc[9:test.n] <- test.rbf$left.inc[9:test.n] <- NA
for (cal.year in 21:27) {
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
print(cal.year)
}
test.rbf
test.rbf[, !grepl(pattern = 'cum', x = names(test.rbf))]
### use incremental difference
sqrt(mean((test.rbf$true_loss.inc - test.rbf$pred_loss.inc)^2))
sqrt(mean((test.rbf$true_loss.inc[1:8] - test.rbf$pred_loss.inc[1:8])^2))
cv.rbf2d$Best_lambda; cv.rbf2d$Best_sigma
test.rbf
# rm(list = ls())
library(ktweedie)
library(beepr)
if (Sys.info()['sysname'] == "Windows") {
setwd("C:/Users/shyderyl/iCloudDrive/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
} else {
setwd("/Users/YLIAN/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
}
traintest <- read.csv("dat_clean.csv", row.names=1)
traintest$accyr <- traintest$accyr - min(traintest$accyr) + 1
# integer -> numeric
traintest[, -(1:2)] <- sapply(traintest[, -(1:2)], as.numeric)
### complete cases
traintest <- traintest[complete.cases(traintest), ]
train <- traintest[traintest$accyr + traintest$devyr < 21, ]
### training
variables <- c("accyr",
"devyr",
"top.inc",
"left.inc"
# "earned_prem"
)
traintest
View(traintest)
# rm(list = ls())
library(ktweedie)
library(beepr)
if (Sys.info()['sysname'] == "Windows") {
setwd("C:/Users/shyderyl/iCloudDrive/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
} else {
setwd("/Users/YLIAN/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
}
traintest <- read.csv("dat_clean.csv", row.names=1)
dim(traintest)
traintest$accyr <- traintest$accyr - min(traintest$accyr) + 1
### use incremental difference
sqrt(mean((test.rbf$true_loss.inc - test.rbf$pred_loss.inc)^2))
test.rbf[1:8,]
sqrt(mean((test.rbf$true_loss.inc[1:7] - test.rbf$pred_loss.inc[1:7])^2))
cv.rbf2d$Best_lambda; cv.rbf2d$Best_sigma
sum(test.rbf$pred_loss.inc)
# rm(list = ls())
library(ktweedie)
library(beepr)
if (Sys.info()['sysname'] == "Windows") {
setwd("C:/Users/shyderyl/iCloudDrive/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
} else {
setwd("/Users/YLIAN/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
}
traintest <- read.csv("dat_clean.csv", row.names=1)
traintest$accyr <- traintest$accyr - min(traintest$accyr) + 1
# integer -> numeric
traintest[, -(1:2)] <- sapply(traintest[, -(1:2)], as.numeric)
### complete cases
traintest <- traintest[complete.cases(traintest), ]
train <- traintest[traintest$accyr + traintest$devyr < 21, ]
### training
variables <- c("accyr",
"devyr",
"top.inc",
"left.inc"
# "earned_prem"
)
View(traintest)
dim(traintest)
# rm(list = ls())
library(ktweedie)
library(beepr)
if (Sys.info()['sysname'] == "Windows") {
setwd("C:/Users/shyderyl/iCloudDrive/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
} else {
setwd("/Users/YLIAN/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
}
traintest <- read.csv("dat_clean.csv", row.names=1)
dim(traintest)
head(traintest)
traintest$accyr <- traintest$accyr - min(traintest$accyr) + 2
head(traintest)
# integer -> numeric
traintest[, -(1:2)] <- sapply(traintest[, -(1:2)], as.numeric)
### complete cases
traintest <- traintest[complete.cases(traintest), ]
dim(traintest)
library(ktweedie)
library(beepr)
if (Sys.info()['sysname'] == "Windows") {
setwd("C:/Users/shyderyl/iCloudDrive/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
} else {
setwd("/Users/YLIAN/Documents/PhD3/Project/KernelTweedie/loss_reserving/cc1767D/Two_variables")
}
traintest <- read.csv("dat_clean.csv", row.names=1)
traintest$accyr <- traintest$accyr - min(traintest$accyr) + 2
# integer -> numeric
traintest[, -(1:2)] <- sapply(traintest[, -(1:2)], as.numeric)
### complete cases
traintest <- traintest[complete.cases(traintest), ]
train <- traintest[traintest$accyr + traintest$devyr < 21, ]
### training
variables <- c("accyr",
"devyr",
"top.inc",
"left.inc"
# "earned_prem"
)
cv.rbf2d <- ktd_cv2d(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kernfunc = rbfdot,
# lambda = c(1e-8,1e-6),
# sigma = c(2e-3, 3e-3),
lambda = c(1e-15,1e-5),
sigma = c(1e-15, 1e-5),
ncoefs = 2000,
nfolds = 10,
rho = 1.5,
loss = "RMSE",
verbose = -1)
cv.rbf2d$Best_lambda; cv.rbf2d$Best_sigma
fit.rbf <- ktd_estimate(x = as.matrix(train[, variables]),
y = train$true_loss.inc,
kern = rbfdot(sigma = cv.rbf2d$Best_sigma),
lam1 = cv.rbf2d$Best_lambda,
rho = 1.5,
ftol = 1e-20,
partol = 1e-20)
# testing
test.rbf <- traintest[traintest$accyr + traintest$devyr >= 21, ]
test.rbf <- test.rbf[order(test.rbf$accyr + test.rbf$devyr), ]
test.n <- nrow(test.rbf)
test.rbf$topleft.inc[16:test.n] <- NA
test.rbf$top.inc[9:test.n] <- test.rbf$left.inc[9:test.n] <- NA
for (cal.year in 21:28) {
pred.tmp <- ktd_predict(newdata = as.matrix(test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, variables]), model = fit.rbf, type = "response")$prediction
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year, "pred_loss.inc"] <- pred.tmp
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "top.inc"] <- pred.tmp[-length(pred.tmp)]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+1, "left.inc"] <- pred.tmp[-1]
test.rbf[test.rbf$accyr + test.rbf$devyr == cal.year+2, "topleft.inc"] <- pred.tmp[-c(1, length(pred.tmp))]
}
test.rbf[, !grepl(pattern = 'cum', x = names(test.rbf))]
### use incremental difference
sqrt(mean((test.rbf$true_loss.inc - test.rbf$pred_loss.inc)^2))
sqrt(mean((test.rbf$true_loss.inc[1:8] - test.rbf$pred_loss.inc[1:8])^2))
cv.rbf2d$Best_lambda; cv.rbf2d$Best_sigma
sum(test.rbf$pred_loss.inc)
View(traintest)
head(traintest, 8)
head(test.rbf, 8)
dim(test.rbf)
citation("mgcv")
args <- list("/opt/R/arm64/bin/qpdf")
names(args) <- "R_QPDF"
do.call(Sys.setenv, args)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
remove.packages("ktweedie")
install.packages("~/Documents/Research/Tweedie/Package/ktweedie_1.0.0.tar.gz", repos = NULL, type = "source")
library(ktweedie)
lam1.seq <- c(1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1)
fit.ktd <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = 1e-8),
lam1 = lam1.seq)
fit.ktd
fit.sktd <- ktd_estimate(x = dat$x,
y = dat$y,
kern = rbfdot(sigma = 0.1),
lam1 = 5,
sparsity = TRUE,
lam2 = 1)
fit.sktd
fit.sktd$estimates$`l1 5 l2 1 rbfkernel 0.1`$weight
( cv1d <- ktd_cv(x = dat$x, y = dat$y,
kern = rbfdot(sigma = 1e-8),
lambda = 10^(-8:-1),
nfolds = 5) )
( cv2d <- ktd_cv2d(x = dat$x, y = dat$y,
kernfunc = rbfdot,
lambda = c(1e-3, 1e0),
sigma = c(1e-3, 1e0),
ncoefs = 10) )
fit <- ktd_estimate(x = dat$x, y = dat$y,
kern = rbfdot(sigma = cv2d$Best_sigma),
lam1 = cv2d$Best_lambda)
fit
fit$estimates$`lambda 0.0203113`$coefficient
x <- 1:5
x[10]
x[10, exact = FALSE]
x[10, exact = TRUE]
x[10]
library(ktweedie)
library(ktweedie)
tools::package_native_routine_registration_skeleton(".")
library(ktweedie)
args <- list("/opt/R/arm64/bin/qpdf")
names(args) <- "R_QPDF"
do.call(Sys.setenv, args)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(ktweedie)
library(ktweedie)
tools::package_native_routine_registration_skeleton(".")
args <- list("/opt/R/arm64/bin/qpdf")
names(args) <- "R_QPDF"
do.call(Sys.setenv, args)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(ktweedie)
cite("ktweedie")
citation("ktweedie")
library(ktweedie)
citation("ktweedie")
library(ktweedie)
citation("ktweedie")
library(ktweedie)
library(ktweedie)
citation("ktweedie")
library(ktweedie)
citation("ktweedie")
bib[list(location = "Zürich"), list(author = "Aristotle", year = "/1930")]
library(ktweedie)
citation("ktweedie")
